Here is a list of things we plan to do for the future. Note that we
don't promise to do any of these, nor when we will do them. It's just a
list of what we hope to be able to do one day.

If you want to dig in, this is the stuff where you might make the most
useful contribution. Note that this list is never complete, and may be
partially outdated, so just because you don't see something here doesn't
mean it is not important.

Before you start work on something, you might want to talk to somebody
from the team. This will help us to prevent double work, i.e. several
people working on the same stuff at once without knowing about each
other.

Finally, always make sure to check out our bug tracker and our feature
request tracker for things that need work


#######################################################################
# Docs, Web site
#######################################################################

General
========
* Add more doxygen comments. However, quality is preferable over quantity
* Add port specific user documentation (dreamcast/palm especially). That
  would include things like:
  - How to use ScummVM on system XYZ
  - Which Palm / WinCE devices will run ScummVM, which definitely will not
    run it (or with which limitations)?
* Update/enhance man page
* Write a high level overview of how ScummVM and its engines work?

README / Manual
===============
  [Ender is working on a new multi-format manual/readme]
* Would be nice to have a HTML version of the README on the web page (and I
  don't just mean a big <pre> section; rather I mean "real" HTML with links
  and lists and tables etc.)
* Ideally, maybe we can convert the README to some meta format, and then from 
  that generate the text README, as well as a HTML one (and maybe also PDF?)
  Some candidates:
  - DocBook
  - texinfo
  - nroff/troff + PolyglotMan (http://polyglotman.sourceforge.net/)
  - tbook (http://tbookdtd.sourceforge.net/)
  - xml2doc (http://xml2doc.sourceforge.net/)
  - ...
* Some parts of the README probably could stand a workover. Right now the
  README is trying to be brief (it's "just" a README after all), but it really
  is the closest thing we have to a proper ScummVM manual. So either we just
  decide to turn it into a full blown manual, or maybe make a even shorter
  README, and a MANUAL with full details, examples, screen shots etc.
* Restructure the contents of our README (our manual...) a bit. A rough and
  incomplete draft of how that might look:
  + Introduction
    - What is ScummVM
    - History
    - Contacting the developers
    - Reporting bugs
  + Supported Platforms
    - Windows, Linux, Mac OS X, WinCE, PalmOS, Dreamcast, ...
      One section for each, indicating basic installation & usage.
      Actually, we may  not need this chapter at all, rather the
      "Installation" and "Running ScummVM" chapters might be subdivided
      as needed...
  + Supported Games
      Here we list *all* supported games, with some information on each
      like known problems, which versions are supported precisely,
      where to get cutscene packs etc.
  + Getting started
    - How to get ScummVM (binary, source)
    - Compiling (with more detail than now); pointer to
      the to-be-written "Developer's Guide to ScummVM"
    - First steps (basic setup, getting a first game to run)
  + Running ScummVM
    - Command line options
    - Hot Keys
    - Savegames
  + Configuration
    - Using the launcher
    - All config file switches in detail
    - Graphics Filters
    - Music and Sound (mostly like now; maybe under the 'Configuration' section)
  + Glossary? (explaining abbreviations etc.)
  + Credits
  + Index? (would be nice, for example 'fullscreen' would link to the hotkey,
     the config file setting, and the command line option)
* Independant of that, create a "Developer's Guide to ScummVM"
  which explains the ScummVM framework, and also the engines, i.e.
  - stuff in common/, like the config manager etc.
  - the backend API, and how to create new backends
  - the sound system
  - how to create a new engine
  - a chapter for each engine, with as many/little details as the resp.
    engine teams deem appropriate...
  - ...


Web site
========
* Add the "Manual" / README to the site
* Redo the screenshots. Mostly this means adding more (and maybe removing or
  replacing a few). What I have in mind are that we follow these guidelines
  (which aren't set in stone nor laws, just guidelines :-)
  - For each unique game, provide 2-3 screenshots
  - Have at least one shot for each major variant of a game (with major variant
    I mean visibly distinct versions, like Zak V1 vs. V2 vs. FM-TOWNS; or
    Monkey Island EGA vs VGA vs CD).
  If I am counting right, that should place us at about 2*(18+2+1+1+1)=46
  screenshots, compared to the current 32 (and more if we start adding HE
  games).
* Update the 'rescumm' FAQ once 0.7.0 is out

#######################################################################
# Common code, infrastructure
#######################################################################

General
=======
* Revise the way "quit" is handled. Maybe add a global variable "g_quit" which
  we set when the application should be quit (e.g. when an EVENT_QUIT is
  received). This is useful if multiple levels of event loops have to be ended
* Fix the Map<> template, make it more robust; maybe use a red-black tree?
* Make some generic "EventLoop" API/class which all backends and the GUI
  use. Initially this would just call the backend poll_event() etc. methods.
  But eventually the EventLoop object(s) could be made by the backend.
  This may allow for more efficient CPU usage etc.
  The current event handling model essentially is polling: the engines run
  some kind of main loop, which, besides many other things, also polls and
  dispatches events. The idea is to turn this around: the event loop
  frequently gives the engine time to do these "other things".
* Try to reduce the memory footprint of the MPEG player. Right now it allocates
  an 8 MB lookup table for YUV->RGB conversion. Perhaps we could borrow some
  code from SDL's software implementation of YUV overlays. (It might even be
  possible to expose some of SDL's YUV overlay API as an optional part of the
  backend, but I don't know enough about it to get it to work. We'd still need
  our own implementation as a fallback, though.)

Build System
============
* Add test(s) for backend usability in the configure script.
* Enhance the Makefile-based build system to support VPATH and stuff, so that
  one can compile scummvm in a directory tree separate from the source tree.
  That would make it possible to build ScummVM with different build options,
  e.g. have one debug build and one optimized build.
  Fingolfin implemented most of this; the only thing missing is that configure
  should detect when it is run in a directory outside the source tree, and in
  that case generate a custom Makefile, with content like this:
	srcdir = /path/to/source/dir
	vpath %.cpp $(srcdir)
	vpath %.h $(srcdir)
	include $(srcdir)/Makefile
* Allow automatic re-runs of configure (this would have to 'save' the values of
  env vars like CXXFLAGS and also command line params)
* Add an install target to the Makefile - Copy binary, install manpage, add
  menu items, install README. See also patch #891909 (Gnome/KDE .desktop file)

Audio
=====
* Get the high quality resample code to work
   [Fingolfin has started work on this]
* Consider getting completely rid of the "master volume" (the config key,
  the command line switch, in the GUI, and in the engines), it doesn't
  seem to serve much of a purpose.
* Add "sound types" to the mixer; client code will be able to pass such a type
  whenever registering an audio stream. Then, volume control will be changed
  to be based on the sound type.
* Move the 'softsynth' MIDI drivers (adlib, MT32, ym2612) from backends/midi
  to sound/ (or a new dir like sound/mididrivers or sound/softsynth).
  This would solve bug #1083058; it'd also be more logical, since the portable
  softsynths don't really belong into the backends/ dir, which is meant for
  platform specific code.

Config Manager
==============
* Add a 'notification' system. E.g. the SoundMixer could request to be notified
  whenever the value of the "volume" config option changes. In other words,
  instead of a "pull" approach (where each subsystem has to check whether any
  config option relevant to it has been changed) we use a "push" approach.
  Of course the current approach is "push", too: whenever e.g. the volume
  setting is changed, the code doing so has to updated the SoundMixer etc.
  That's cumbersome, and error prone. Would be much nicer if updating the
  volume config value automatically notifies the SoundMixer, iMuse etc.

Files
=====
* Add a FilesystemManager or FileManager or so which should unify and/or
  replace the current File/FilesystemNode classes (and maybe SaveFileManager).
  The goal is to make these things as portable as possible while keeping it
  easy to use for the coder. Some new functionality we need:
  - check for existence of file/directory
  - check whether given directory is readable/writeable
  - convert FSNode into a string representation (for prefs file)
  - convert said string representation back to FSNode
  Of course that can be added w/o a FileManager class, too - but it might be
  nice to have all of these integrated.

GUI
===
* Remove hard coded 320x200 assumptions, use game screen size
* Add ability to scale GUI (ie. to make the GUI less tiny in COMI)
* Remove code duplication between EditTextWidget and ListWidget (i.e. text 
  editing code; maybe we can factor that out into a common base or aggregate
  class... not yet sure).
* Fix EditTextWidget::drawCaret and ListWidget::drawCaret support for alternate
  fonts (the current code overdraws chars partly, and relies on the fact that
  our default built-in font has a separation pixel column on the *left* side;
  most other bitmap fonts have it on the right, though). To this end, we maybe
  should backup the background before drawing the caret, and restore it when
  erasing the caret.
* Add a new "options" dialog which is used by all frontends: for this, we'd
  agree on a hotkey used in all engines to invoke that dialog; it would sport
  settings for the volume, graphics, paths, etc.; it would co-exist with the
  engines "native" option dialogs.
  The about dialog would be reachable from here, too, as well as a quit button.
  Justification: This ensures that all settings are really reachable from
  all of the engines, which is not the case currently.
  Problem: It's not fully clear to me how to "best" deal with global vs. local
  settings here...

Launcher
========
* Add more options to global options dialog
* Add more options to game target options dialog 

Plugins
=======
* Add a plugin API that allows querying a plugin for the savegames associated
  with a given game; that is, you pass the name of a target from the config
  to the plugin, and it returns a list of savegames. How that list would look
  like exactly is debatable; but it should be possible to extract a user
  friendly name; a slot ID corresponding to the "-x" command line param;
  and possibly a filename.
  Justification: This API would make it possible to directly load savegames
  from the launcher.

#######################################################################
# Engines / frontends
#######################################################################

General
=======
* Fix engines so they clean up after themselves, to allow proper re-entry
  to the launcher. See "FIXME: LAUNCHERHACK" in base/main.cpp

SCUMM
=====
* Make it possible to restart games properly
* Add method of setting initial debug channels from command-line
* Possible implement a new resource manager, which then also could be shared
  by ScummEX. [Jamieson has some ideas about this and might work on it|

* Figure out how to extract resources from Apple II and Commodore 64 versions
  See also <http://www.mts.net/~kbagnall/commodore/scumm/> for some notes on
  the SCUMM C64 disk format.
* Figure out how to extract resources from Turbografx/PC Engine version of Loom
* Indiana Jones and the Last Crusade EGA: Add inventory support for Macintosh version
* Loom EGA: Add support for music and sound effects in Macintosh version
* Add support for NES version of Maniac Mansion
* Add support for handling Kanji in FM Towns games (foreground is rendered on a
  second plane at 640x480), text uses Shift_JIS encoding
  [implementation now that currently depends on font rom, not needing the rom
   would be preferable]

* Add support for TFMX music format in Amiga version of Monkey Island 1
  Check http://darkstar.tabu.uni-bonn.de/~neo/audio.html for music format
  details
* Add tool and support for compress *.la* file resources (ex. sounds) to fit
  on small devices 
* Fix codec44 for nut fonts
* iMUSE Digital:
  - Add code for MP3 and Ogg Vorbis compressed datafiles
* Humongous Entertainment Games
  - Add proper handling of sound looping in Humongous games
  - Add sound pitch support for piano keys in piano mini game of fbear (DOS)
  - Add rename/delete file support, to make file opcodes function correctly
  - Fix nukeArrays, it is nuking wrong arrays in stopObjectCode() sometimes
* Humongous entertainment >= v7 titles:
  - Add support for palette slots (_numPalettes * 1024) in HE99+ games.(For ff5demo/freddicove)
  - Add mask support to akos codec32, charset shouldn't be drawn under moving actors
  - Add support for song sync. in HE80+ games. (Used in ff2-demo/freddi2/pajama)
  - Add support for SBNG sound resources for songs ^
  - Add support for sprites (Used by all HE90+ games, especially Spy Fox games)
  - Add support for wizImage compression types 2/3 (For freddicove)
  - Add support for additional drawWizImage flags (cyx)
  - Add support for additional aux animation resources (cyx)
    (^ Need to find where they are used) 
  - Add shadows support for akos codecs in HE90+ games, uses XMAP resources.
  - Add addtional arrayOps cases (For smaller/lost).
  - Add support for array sorting (Need to find where it is used).
  - Fix actor glitches in pajama2
  - Fix array issues in Buzzy games (Kirben)
  - Fix inventory background/items disappearing in puttzoo/zoodemo/putttime/timedemo
  - Add support for various new opcodes

Broken Sword 2
==============
* Enforce ScummVM code formatting guidelines. (Mostly done?)
* Encapsulate the code into sensible objects. (Partly done.)
* Enable the CD swapping code. (Partly done.)
* Support cutscenes in some kind of open video format. (Partly done.)
* Fix the credits so they look more like the original. (Did we ever get the
  source code for that?)

SIMON
=====
* Add support for auto decrunching the gameamiga file of demo version of Simon
  the Sorcerer 1 (Amiga) via decrunch_file_amiga()
* Add support for dictionary files in Amiga and Macintosh versons of
  Simon the Sorcerer 2
* Add support for Protracker music format used in Amiga versions
* Add support for drawing main graphics correctly in Amiga versions

SAGA
====
- legacy items -
 * Remove any traces of the additional level of abstraction reinherit used
 * Remove homerolled high level data structures like stacks that should
   be provided by ScummVM if they aren't already.
 * OO'ify (blah_mod.h contains public stuff, blah.h private stuff) [almost done]

- bugs -
 * Make actor animation Event-driven. See FIXME in actor.cpp
 * Actor pops up with wrong palette at transition to faery scene. Again :)
 * Make sprite RLE decompressor work on Mac resources
 * Animation end is not detected properly with Mac. That leads to hang in intro
 * Sound/voice length calculation wrong


- plans -
 * Implement unimplemented opcodes
 * Remove use of floating point, especially doubles.
 * Rewrite path finder (h00ligan)
 * Fix the usage of Rect so that it's more consistent with the rest of ScummVM,
   e.g. a rectangle covering the entire ITE screen should have right=320 and
   bottom=200. (eriktorbjorn, partly - mostly? - done)
 * Change script buffer so that its point to the appropriate data.
   (eriktorbjorn - mostly done)
 * ISO - tile scene implementation

- features -
 * Add sound/voices compression. Should _considerably_ save space.
 * Add support for Mac versions. All data is in BE mode and structures are aligned.
   (h00ligan, partly done)
 * Support various demo versions
 * Support IHNM
 * Add the Wyrmkeep folks to the credits section of our README so we can thank
   them properly for... Well, whoever negotiated the deal with them will have
   to write up something approrpriate here. I don't know enough about it myself.

#######################################################################
# Backends
#######################################################################

General
=======
* Several of the backend factory functions take config parameters. It should
  be possible to get rid of those once the config system rewrite (see above)
  has been done. In that case, the backends simply can query the config
  manager for these parameters (or any others they might like :-).
* Change backends to directly access the config manager
* Add API to query backend for a list of available music engines
  Useful for Options dialog
* Sony PS2 Port
* EPOC32/Symbian port. Might be able to start based on existing P800 port,
  however that code seems to be old and would need extensive work to be
  usable in post-0.6.0 ScummVM. Note: NGage uses Symbian OS, too...
* MS DOS port using Allegro <http://www.talula.demon.co.uk/allegro/> and
  DJGPP <http://www.delorie.com/djgpp/> ?
* Intent <http://withintent.biz/> port (already done by David Given, merge?)
* Digita OS port? (play games on a select few digital cameras...)
  <http://digita.mame.net/reviews.htm>

X11 backend
===========
* Update it to support the latest OSystem changes
* Make it work with multiple bitdepths
* Add frills used by SDL backend like graphic filters usage and CD audio

#######################################################################
# Tools
#######################################################################

General
=======
* Try to unify the usage of the compression tools, where possible /
  necessary.

Descumm
=======
* Turn it into a library, to be used by a command line frontend (like now),
  ScummVM debugger, and ScummEX. Basically, the API could consist of a single
  function, which takes a pointer to a memory buffer, its length, the Scumm
  version and optionally a game id. Also, it would get a pointer to a print
  function (in the case of the CLI tool, print to stdout; for ScummVM, print
  to our GUI console; for ScummEX, append to some window/widget)
* Rewrite code to use 2 passes; first pass builds an intermediate graph, the
  second pass then tries to detect loops, break/continue statements etc.
* Proper implementation of o6_startObjectQuick decompilation (see comment in
  descumm6.c). May requre rewrite of core program logic
